{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"D",
				"DS1302"
			],
			[
				"ge",
				"getTime"
			],
			[
				"t",
				"t"
			],
			[
				"seril",
				"Serial"
			],
			[
				"pa",
				"packet_structure"
			],
			[
				"de",
				"DEBUG"
			],
			[
				"print",
				"print"
			],
			[
				"win",
				"windSpeed"
			],
			[
				"check",
				"checksum"
			],
			[
				"prin",
				"println"
			],
			[
				"p",
				"pressure"
			],
			[
				"out",
				"output"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "/*\n\n*/\n\n#include \"configuration.h\"\n#include <Arduino.h>\n#include <ESP8266WiFi.h>   \n#include <SoftwareSerial.h> \n#include <DS1302.h>\n#include <EpochTime.h>\n\n// Init the DS1302\nDS1302 rtc(CEpin, IOpin, SCLKpin);\n\n// Init a Time-data structure\nTime t;\n\nString getClientOutput(void);\nString getcsvOutput(void);\n\nSoftwareSerial mySerial(SSRX, SSTX); // RX, TX\n\ndouble temperature = 0.00;\ndouble pressure = 0.00;\nint windDir = 0;\ndouble windSpeed = 0.0;\nint humidity = 0;\nint lightValue = 0;\nunsigned long int rainTipperCounter = 0;\n\nString s = \"\";\n\n// Create an instance of the server\n// specify the port to listen on as an argument\nWiFiServer server(WEB_PORT);\n\nbyte dataByte;\n\nbyte buffer[24];\nint bufferindex = 0;\n\n// I've define a packet to be as follows\n// H is header   3 chars\n// D is data     12 chars\n// C is checksum 2 chars\n// so\n// HHHDDDDDDDDDDDDCC\n//\n// and in the D section\n// byte 0 high byte of temperature\n// byte 1 low byte of temperature\n// byte 2 high byte of pressure\n// byte 3 low byte of pressure\n// byte 4 wind ordinal (values should be 0 - 15 to represent compass points)\n// byte 5 Humdity (value range 0 - 100)\n// bytes 6 to 9 rain tipper vale\n// byte 10 Wind speed high byte\n// byte 11 Wind speed low byte\nstruct packet {\n  byte header[HEADER_SIZE];\n  byte data[DATA_SIZE];\n  byte checksum[CHECKSUM_SIZE];\n}my_packet;\n\nvoid setup()\n{\n  #ifdef DEBUG\n  // Open serial communications and wait for port to open:\n  Serial.begin(9600);\n  Serial.println(\"Beginning setup\");\n#endif\n\n  // Set the clock to run-mode, and disable the write protection\n  rtc.halt(false);\n  rtc.writeProtect(true);\n\n  pinMode(GREEN_LED, OUTPUT);\n  pinMode(RED_LED, OUTPUT);\n\n  // set the data rate for the SoftwareSerial port\n  mySerial.begin(9600);\n  \n  // Connect to WiFi network\n#ifdef DEBUG\n  Serial.println();\n  Serial.println();\n  Serial.print(\"Connecting to \");\n  Serial.println(SSSID);\n#endif\n  WiFi.begin(SSSID, PASSWORD);\n\n    digitalWrite(RED_LED, HIGH);\n    digitalWrite(GREEN_LED, HIGH);\nwhile (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n#ifdef DEBUG\n    Serial.print(\".\");\n#endif\n}\n    digitalWrite(RED_LED, LOW);\n    digitalWrite(GREEN_LED, LOW); \n#ifdef DEBUG\n  Serial.println();\n  Serial.println(\"WiFi connected\");\n#endif\n\n  // Start the server\n  server.begin();\n#ifdef DEBUG\n  Serial.println(\"Server started\");\n#endif\n\n  // Print the IP address\n#ifdef DEBUG\n  Serial.println(WiFi.localIP());\n#endif\n\n  digitalWrite(RED_LED, LOW);\n  digitalWrite(GREEN_LED, LOW);\n\n  #ifdef DEBUG\n  // Open serial communications and wait for port to open:\n  Serial.begin(9600);\n  Serial.println(\"Setup complete\");\n#endif\n}\n\nvoid loop()\n{\n  if (mySerial.available()) {\n    dataByte = mySerial.read();\n\n    if (dataByte == 13) {\n      my_packet.header[0] = buffer[1];\n      my_packet.header[1] = buffer[2];\n      my_packet.header[2] = buffer[3];\n\n      my_packet.data[0] = buffer[4]; // Temp\n      my_packet.data[1] = buffer[5]; // Temp\n      my_packet.data[2] = buffer[6]; // Pressure\n      my_packet.data[3] = buffer[7]; // Pressure\n      my_packet.data[4] = buffer[8]; // Win Dir\n      my_packet.data[5] = buffer[9]; // Humidity\n      my_packet.data[6] = buffer[10]; // Rain\n      my_packet.data[7] = buffer[11]; // Rain\n      my_packet.data[8] = buffer[12]; // Rain\n      my_packet.data[9] = buffer[13]; // Rain\n      my_packet.data[10] = buffer[14]; //Wind Speed\n      my_packet.data[11] = buffer[15]; //Wind Speed\n      my_packet.data[12] = buffer[16]; //Light Value\n      my_packet.data[13] = buffer[17]; //Light Value\n\n      my_packet.checksum[0] = buffer[18]; // Lowbyte\n      my_packet.checksum[1] = buffer[19]; //Highbyte\n\n      /// Perform checksum\n      int checksum = 0;\n      for (int i = 0; i < DATA_SIZE; ++i) {\n        checksum += my_packet.data[i];\n      }\n\n      if (checksum == ( my_packet.checksum[0] << 8 ) + my_packet.checksum[1]) {\n        digitalWrite(GREEN_LED, HIGH);\n\n        // Temperature\n        temperature = ( my_packet.data[0] << 8 ) + my_packet.data[1];\n        temperature = (temperature / 10) - 120;\n#ifdef DEBUG\n        Serial.print(\"Temperature = \");\n        Serial.println(temperature);\n#endif\n\n        //Pressure\n        pressure = ( my_packet.data[2] << 8 ) + my_packet.data[3];\n        pressure = (pressure / 10) - 800;\n#ifdef DEBUG\n        Serial.print(\"Pressure = \");\n        Serial.println(pressure);\n#endif\n\n        // Wind Ordinal\n        windDir = my_packet.data[4];\n#ifdef DEBUG\n        Serial.print(\"Wind Dir: = \");\n        Serial.println(windDir);\n#endif\n\n        // Humidity\n        humidity = my_packet.data[5];\n#ifdef DEBUG\n        Serial.print(\"Humidity = \");\n        Serial.print(humidity);\n        Serial.println(\"%\");\n#endif\n\n        // Wind Speed\n        windSpeed = ( my_packet.data[10] << 8 ) + my_packet.data[11];\n        windSpeed = (windSpeed / 100) - 45;\n#ifdef DEBUG\n        Serial.print(\"Wind Speed = \");\n        Serial.println(windSpeed);\n#endif\n\n        // Rain tipper counter\n        rainTipperCounter = my_packet.data[6];\n        rainTipperCounter = (rainTipperCounter << 8) + my_packet.data[7];\n        rainTipperCounter = (rainTipperCounter << 8) + my_packet.data[8];\n        rainTipperCounter = (rainTipperCounter << 8) + my_packet.data[9];\n#ifdef DEBUG\n        Serial.print(\"Rain Tipper Counter = \");\n        Serial.println(rainTipperCounter );\n        \n#endif\n\n        // Light Value\n        lightValue = ( my_packet.data[12] << 8 ) + my_packet.data[13];\n#ifdef DEBUG\n        Serial.print(\"Light Value = \");\n        Serial.println(lightValue);\n        Serial.print(getEpochTime());\n#endif\n      }\n\n      bufferindex = 0;\n      digitalWrite(GREEN_LED, LOW);\n\n#ifdef DEBUG\n      Serial.println();\n#endif\n    }\n    else {\n      buffer[bufferindex] = dataByte;\n      bufferindex++;\n    }\n  }\n\n  // Check if a client has connected\n  WiFiClient client = server.available();\n  if (client) {\n#ifdef DEBUG\n    Serial.println(\"new client\");\n#endif\n    // an http request ends with a blank line\n    boolean currentLineIsBlank = true;\n    while (client.connected()) {\n      if (client.available()) {\n#ifdef DEBUG\n        Serial.println(\"Client is available\");\n#endif\n        // Read the first line of the request\n        String req = client.readStringUntil('\\r');\n#ifdef DEBUG\n        Serial.println(req);\n#endif\n        client.flush();\n        // Prepare the response\n        digitalWrite(RED_LED, HIGH);\n        // Match the request\n        if (req.indexOf(\"/csv\") != -1) {\n          s = getcsvOutput();\n        } else (req.indexOf(\"/settime\") != -1) {\n          //TODO: Put Set Time code here\n        }else{\n          s = getClientOutput();\n        }\n        client.print(s);\n        delay(1);\n        client.stop();\n#ifdef DEBUG\n        Serial.println(\"Client disconnected\");\n#endif\n        digitalWrite(RED_LED, LOW);\n      }\n    }\n  }\n}\n\n\nString getcsvOutput() { \n  s = \"\";\n  s = temperature;\n  s += \",\";\n  s += pressure;\n  s += \",\";\n  s += windDir;\n  s += \",\";\n  s += humidity ;\n  s += \",\";\n  s += windSpeed ;\n  s += \",\";\n  s += rainTipperCounter ;\n  s += \",\";\n  s += lightValue ;\n  s += \",\";\n  s += getEpochTime();\n  return s;\n}\n\nString getClientOutput() {\n  s = \"HTTP/1.1 200 OK\\r\\n\";\n  s += \"Content-Type: text/html\\r\\n\";\n  s += \"Connection: close\\r\\n\"; // the connection will be closed after completion of the response\n  s += \"Refresh: 60\\r\\n\\r\\n\"; // refresh the page automatically every 60 sec\n\n  s += \"<!DOCTYPE HTML>\\r\\n\";\n  s += \"<html>\\r\\n\";\n  s += \"<body>\\r\\n\";\n  s += \"<head>\\r\\n\";\n  s += \"<title>Arduino Serial Weather Station</title>\\r\\n\";\n\n  s += \"</head>\\r\\n\";\n  s += \"<h3>Last good readings</h3>\\r\\n\";\n  s += \"Temperature: \\r\\n\";\n  s += temperature;\n  s += \" degrees C\\r\\n\";\n  s += \"<br />\\r\\n\";\n  s += \"Pressure: \" + String(pressure);\n  s += \" Pa\\r\\n\";\n  s += \"<br />\\r\\n\";\n  s += \"Wind Direction: \\r\\n\";\n  s += windDir;\n\n  s += \"<br />\\r\\n\";\n  s += \"Humidity: \\r\\n\";\n  s += humidity;\n  s += \"<br />\\r\\n\";\n\n  s += \"Wind Speed: \\r\\n\";\n  s += windSpeed;\n  s += \"<br />\\r\\n\";\n\n  s += \"Rain counter: \\r\\n\";\n  s += rainTipperCounter;\n  s += \"<br />\\r\\n\";\n\n  s += \"Light Value: \\r\\n\";\n  s += lightValue;\n  s += \"<br />\\r\\n\";\n\n  s += \"Last Update: \\r\\n\";\n\n  s += getEpochTime();\n  s += \"<br />\\r\\n\";\n  s += \"</body>\\r\\n\";\n  s += \"</html>\\r\\n\";\n\n  return s;\n}\n",
			"file": "src/main.cpp",
			"file_size": 8239,
			"file_write_time": 1453818341000000,
			"settings":
			{
				"buffer_size": 8240,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/configuration.h",
			"settings":
			{
				"buffer_size": 527,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/configuration.h.template",
			"settings":
			{
				"buffer_size": 528,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"",
				"CodeFormatter: Format Code"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"pa",
				"Package Control: Install Package"
			],
			[
				"style",
				"SublimeAStyleFormatter: Format Current File"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 139.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/johnburrin/Dropbox/Projects/ArduinoWeatherStationReceiver/.gitignore",
		"/Users/johnburrin/Dropbox/Projects/ArduinoWeatherStationReceiver/lib/EpochTime/EpochTime.cpp",
		"/Users/johnburrin/Dropbox/Projects/ArduinoWeatherStationReceiver/lib/EpochTime/EpochTime.h",
		"/Users/johnburrin/Dropbox/Projects/ArduinoWeatherStationReceiver/lib/DS1302/DS1302.h",
		"/home/john/Dropbox/Projects/ArduinoWeatherStationReceiver/src/main.cpp",
		"/home/john/Dropbox/Projects/ArduinoWeatherStationReceiver/platformio.ini",
		"/home/john/Dropbox/Projects/ArduinoWeatherStation/platformio.ini",
		"/home/john/Dropbox/Projects/sublimeTest/main.cpp",
		"/home/john/.config/sublime-text-2/Packages/User/Stino/Preferences.stino-settings",
		"/home/john/Projects/bug-free-bassoon/despatchbay/despatchbay/shipping.wsdl",
		"/home/john/Projects/bug-free-bassoon/despatchbay/Tracking/tracking.wsdl",
		"/home/john/Projects/bug-free-bassoon/despatchbay/Addressing/addressing.wsdl",
		"/home/john/Dropbox/Projects/ArduinoWeatherStation/src/main.cpp",
		"/home/john/Applications/Sublime Text 2/install.sh",
		"/home/john/Dropbox/Projects/Data-Packet/main.cpp",
		"/home/john/Dropbox/Projects/ArduinoWeatherStation/RS232",
		"/home/john/.config/sublime-text-2/Packages/User/Default (Linux).sublime-keymap",
		"/usr/share/arduino/examples/01.Basics/Blink/Blink.ino",
		"/home/john/.config/sublime-text-2/Packages/User/PlatformIO.sublime-build"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"RED_LED",
			"green_led",
			"packet.",
			"my_packet",
			"stream_data.",
			"my_packet.",
			"solar",
			"bool",
			">",
			"arduino"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"sublime"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/main.cpp",
					"settings":
					{
						"buffer_size": 8240,
						"regions":
						{
						},
						"selection":
						[
							[
								210,
								157
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/configuration.h",
					"settings":
					{
						"buffer_size": 527,
						"regions":
						{
						},
						"selection":
						[
							[
								229,
								80
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/configuration.h.template",
					"settings":
					{
						"buffer_size": 528,
						"regions":
						{
						},
						"selection":
						[
							[
								528,
								528
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.astyle_error_message":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 144.0
	},
	"output.upload|/home/john/Dropbox/Projects/ArduinoWeatherStation/src|1447351634.83":
	{
		"height": 112.0
	},
	"output.upload|/usr/share/arduino/examples/01.Basics/Blink|1447269219.6":
	{
		"height": 112.0
	},
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 244.0,
	"status_bar_visible": true
}
